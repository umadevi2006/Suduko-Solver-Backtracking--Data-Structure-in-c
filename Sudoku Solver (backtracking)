#include <stdio.h>
#define N 9
// Function to print the Sudoku grid
void printGrid(int grid[N][N]) {
 for (int row = 0; row < N; row++) {
 for (int col = 0; col < N; col++) {
 printf("%2d", grid[row][col]);
 }
 printf("\n");
 }
}
// Function to check if a number is safe to place in the given row and column
int isSafe(int grid[N][N], int row, int col, int num) {
 // Check if the number is already present in the row or column
 for (int x = 0; x < N; x++) {
 if (grid[row][x] == num || grid[x][col] == num) {
 return 0;
 } 
}
// Check if the number is already present in the 3x3 subgrid
 int startRow = row - row % 3;
 int startCol = col - col % 3;
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 if (grid[i + startRow][j + startCol] == num) {
 return 0;
 }
 }
 }
 
 return 1;
}
// Function to solve Sudoku using backtracking
int solveSudoku(int grid[N][N]) {
 int row, col;
 
 // Find an empty cell
 int isEmpty = 1;
 for (row = 0; row < N; row++) {
 for (col = 0; col < N; col++) {
 if (grid[row][col] == 0) {
 isEmpty = 0;
 break;
 }
 }
 if (!isEmpty) {
 break;
 }
 }
 
 // If no empty cell is found, puzzle is solved
 if (isEmpty) {
 return 1;
 }
 
 // Try different numbers in the empty cell
 for (int num = 1; num <= 9; num++) {
 if (isSafe(grid, row, col, num)) {
 grid[row][col] = num;
 // Recursively solve the puzzle
 if (solveSudoku(grid)) {
 return 1;
 }
 // If placing num in current cell doesn't lead to a solution, backtrack
 grid[row][col] = 0;
 }
 }
 
 // Trigger backtracking
 return 0;
}
int main() {
 int grid[N][N];
 
 printf("Enter the Sudoku puzzle (use 0 for empty cells):\n");
 for (int row = 0; row < N; row++) {
 for (int col = 0; col < N; col++) {
 scanf("%d", &grid[row][col]);
 }
 }
 
 if (solveSudoku(grid)) {
 printf("\nSudoku puzzle solved successfully!\n");
 printGrid(grid);
 } else {
 printf("\nNo solution exists for the given Sudoku puzzle.\n");
 }
 
 return 0;
}
